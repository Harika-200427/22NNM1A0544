import React, { useEffect, useState } from "react";



function randomSlug(length = 6) {
  const chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
  let s = "";
  for (let i = 0; i < length; i++) s += chars[Math.floor(Math.random() * chars.length)];
  return s;
}

function isValidUrl(url) {
  try {
    const normalized = url.trim();
    // allow missing protocol
    const withProtocol = /^(https?:\/\/)\/?.+/.test(normalized) ? normalized : https://${normalized};
    new URL(withProtocol);
    return true;
  } catch (e) {
    return false;
  }
}

const STORAGE_KEY = "shortly_links_v1";

export default function App() {
  const [originalUrl, setOriginalUrl] = useState("");
  const [alias, setAlias] = useState("");
  const [links, setLinks] = useState({});
  const [message, setMessage] = useState(null);
  const [baseHost, setBaseHost] = useState(window.location.origin + "/r/");

  useEffect(() => {
    const raw = localStorage.getItem(STORAGE_KEY);
    if (raw) setLinks(JSON.parse(raw));
  }, []);

  useEffect(() => {
    localStorage.setItem(STORAGE_KEY, JSON.stringify(links));
  }, [links]);

  function makeSlug(requested) {
    const clean = requested.trim();
    if (!clean) return randomSlug();
   
    const slug = clean.replace(/[^a-zA-Z0-9\-_]/g, "");
    return slug || randomSlug();
  }

  function handleShorten(e) {
    e && e.preventDefault();
    setMessage(null);
    if (!isValidUrl(originalUrl)) {
      setMessage({ type: "error", text: "Please enter a valid URL." });
      return;
    }

    const slug = makeSlug(alias || randomSlug(6));
    if (links[slug]) {
      setMessage({ type: "error", text: Alias \"${slug}\" is already taken. Choose another one. });
      return;
    }

    const normalized = /^(https?:\/\/)\/?.+/.test(originalUrl.trim()) ? originalUrl.trim() : https://${originalUrl.trim()};

    const record = {
      original: normalized,
      slug,
      createdAt: new Date().toISOString(),
      visits: 0,
    };

    setLinks(prev => ({ ...prev, [slug]: record }));
    setOriginalUrl("");
    setAlias("");
    setMessage({ type: "success", text: Short URL created: ${baseHost}${slug} });
  }

  function handleOpen(slug) {
    const rec = links[slug];
    if (!rec) return;
   
    setLinks(prev => ({ ...prev, [slug]: { ...rec, visits: (rec.visits || 0) + 1 } }));
    window.open(rec.original, "_blank");
  }

  function handleCopy(shortUrl) {
    navigator.clipboard && navigator.clipboard.writeText(shortUrl);
    setMessage({ type: "success", text: "Copied to clipboard" });
  }

  function handleDelete(slug) {
    const copy = { ...links };
    delete copy[slug];
    setLinks(copy);
    setMessage({ type: "info", text: Deleted ${slug} });
  }

  function exportJson() {
    const data = JSON.stringify(links, null, 2);
    const blob = new Blob([data], { type: "application/json" });
    const href = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = href;
    a.download = "shortly-backup.json";
    a.click();
    URL.revokeObjectURL(href);
  }

  function importJson(file) {
    const reader = new FileReader();
    reader.onload = e => {
      try {
        const parsed = JSON.parse(e.target.result);
        if (typeof parsed === "object") {
          setLinks(prev => ({ ...prev, ...parsed }));
          setMessage({ type: "success", text: "Imported links" });
        } else throw new Error("Invalid format");
      } catch (err) {
        setMessage({ type: "error", text: "Failed to import: invalid JSON." });
      }
    };
    reader.readAsText(file);
  }

  return (
    <div className="min-h-screen bg-gray-50 flex items-start justify-center p-6">
      <div className="max-w-3xl w-full bg-white shadow-lg rounded-2xl p-6">
        <header className="flex items-center justify-between mb-4">
          <div>
            <h1 className="text-2xl font-extrabold">Shortly — URL Shortener</h1>
            <p className="text-sm text-gray-500">Create and manage short links locally (localStorage). Export/Import for backups.</p>
          </div>
          <div className="text-xs text-gray-400">Base: <span className="font-mono">{baseHost}</span></div>
        </header>

        <form onSubmit={handleShorten} className="grid grid-cols-1 gap-3 mb-4">
          <label className="text-sm font-medium">Long URL</label>
          <input
            value={originalUrl}
            onChange={e => setOriginalUrl(e.target.value)}
            placeholder="https://example.com/very/long/path"
            className="w-full border rounded-md p-2 outline-none focus:ring-2 focus:ring-indigo-300"
          />

          <div className="grid md:grid-cols-3 gap-3 items-end">
            <div className="md:col-span-2">
              <label className="text-sm font-medium">Custom alias (optional)</label>
              <input
                value={alias}
                onChange={e => setAlias(e.target.value)}
                placeholder="my-alias or leave blank for random"
                className="w-full border rounded-md p-2 outline-none focus:ring-2 focus:ring-indigo-300"
              />
            </div>

            <div className="flex gap-2">
              <button type="submit" className="px-4 py-2 rounded-xl bg-indigo-600 text-white font-semibold shadow">Shorten</button>
              <button
                type="button"
                onClick={() => { setOriginalUrl(""); setAlias(""); }}
                className="px-4 py-2 rounded-xl border">
                Reset
              </button>
            </div>
          </div>
        </form>

        {message && (
          <div className={p-3 rounded-md mb-4 ${message.type === 'error' ? 'bg-red-100 text-red-700' : message.type === 'success' ? 'bg-green-100 text-green-700' : 'bg-gray-100 text-gray-700'}}>
            {message.text}
          </div>
        )}

        <div className="flex items-center justify-between mb-4">
          <h2 className="text-lg font-semibold">Your short links</h2>
          <div className="flex gap-2 items-center">
            <button onClick={exportJson} className="text-sm px-3 py-1 border rounded">Export</button>
            <label className="text-sm px-3 py-1 border rounded cursor-pointer">
              Import
              <input type="file" accept="application/json" onChange={e => { if (e.target.files?.[0]) importJson(e.target.files[0]); }} className="hidden" />
            </label>
            <button onClick={() => { localStorage.removeItem(STORAGE_KEY); setLinks({}); }} className="text-sm px-3 py-1 border rounded">Clear all</button>
          </div>
        </div>

        <div className="space-y-3">
          {Object.keys(links).length === 0 && (
            <div className="text-sm text-gray-500">No links yet — create one above.</div>
          )}

          {Object.entries(links).sort((a,b)=> new Date(b[1].createdAt)-new Date(a[1].createdAt)).map(([slug, rec]) => (
            <div key={slug} className="border rounded-lg p-3 flex flex-col md:flex-row md:items-center md:justify-between gap-3">
              <div className="flex-1">
                <div className="flex items-center gap-3">
                  <div className="font-mono text-sm bg-gray-100 px-2 py-1 rounded">{slug}</div>
                  <div className="text-sm text-gray-700 truncate">{rec.original}</div>
                </div>
                <div className="text-xs text-gray-400 mt-1">Created: {new Date(rec.createdAt).toLocaleString()} • Visits: {rec.visits || 0}</div>
              </div>

              <div className="flex gap-2 items-center">
                <button onClick={() => handleOpen(slug)} className="px-3 py-1 border rounded">Open</button>
                <button onClick={() => handleCopy(${baseHost}${slug})} className="px-3 py-1 border rounded">Copy</button>
                <a href={rec.original} target="_blank" rel="noreferrer" className="px-3 py-1 border rounded">Visit original</a>
                <button onClick={() => handleDelete(slug)} className="px-3 py-1 border rounded text-red-600">Delete</button>
              </div>
            </div>
          ))}
        </div>

        <footer className="mt-6 text-xs text-gray-400">
          This demo stores links in your browser only. To make a public shortener, deploy a tiny backend that serves <span className="font-mono">/r/:slug</span> and redirects to the original URL. See the comments in the file for a Node/Express sample.
        </footer>

        
      </div>
    </div>
  );

}
